@use '../tools/_sass_variables.scss' as v;

// GridItem Component Styles
// Individual grid item component with positioning and interactions

.ui-grid-item {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  background: v.$white;
  border: 1px solid v.$light-grey;
  border-radius: v.$radius-m;
  padding: v.$spacing-m;
  transition: all v.$transition-normal;
  
  // Grid positioning using CSS variables
  grid-column: var(--ui-grid-item-col) / span var(--ui-grid-item-w);
  grid-row: var(--ui-grid-item-row) / span var(--ui-grid-item-h);
  
  // Interactive states
  &:hover {
    box-shadow: v.$shadow-m;
    border-color: v.$primary-green;
  }
  
  &:focus {
    outline: 2px solid v.$primary-green;
    outline-offset: 2px;
  }
  
  // Draggable state
  &.ui-draggable {
    cursor: grab;
    
    &:active {
      cursor: grabbing;
    }
    
    &.ui-dragging {
      transform: scale(1.05);
      z-index: 10;
      box-shadow: v.$shadow-l;
      opacity: 0.9;
    }
  }
  
  // Resizable state
  &.ui-resizable {
    .ui-resize-handle {
      position: absolute;
      right: 4px;
      bottom: 4px;
      width: 16px;
      height: 16px;
      cursor: se-resize;
      border-radius: v.$radius-s;
      background: v.$primary-green;
      opacity: 0.7;
      transition: all v.$transition-fast;
      
      // Resize handle icon
      &::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 8px;
        height: 8px;
        background: repeating-linear-gradient(
          45deg,
          transparent,
          transparent 1px,
          v.$white 1px,
          v.$white 2px
        );
      }
      
      &:hover {
        opacity: 1;
        transform: scale(1.1);
      }
    }
  }
  
  // Locked state
  &.ui-locked {
    opacity: 0.6;
    filter: grayscale(50%);
    cursor: not-allowed;
    
    &.ui-draggable {
      cursor: not-allowed;
    }
    
    .ui-resize-handle {
      cursor: not-allowed;
      opacity: 0.3;
      
      &:hover {
        transform: none;
        opacity: 0.3;
      }
    }
  }
  
  // When not draggable
  &:not(.ui-draggable) {
    cursor: default;
  }
  
  // When not resizable
  &:not(.ui-resizable) .ui-resize-handle {
    display: none;
  }
}

// Responsive adjustments
@media (max-width: 768px) {
  .ui-grid-item {
    padding: v.$spacing-s;
    
    .ui-resize-handle {
      width: 14px;
      height: 14px;
      right: 2px;
      bottom: 2px;
    }
  }
}

// Reduced motion support
@media (prefers-reduced-motion: reduce) {
  .ui-grid-item {
    transition: none;
    
    &.ui-dragging {
      transform: none;
    }
    
    .ui-resize-handle {
      transition: none;
      
      &:hover {
        transform: none;
      }
    }
  }
}

// High contrast mode support
@media (prefers-contrast: high) {
  .ui-grid-item {
    border-width: 2px;
    
    .ui-resize-handle {
      border: 1px solid v.$primary-dark;
      background: v.$primary-dark;
    }
  }
}

// Print styles
@media print {
  .ui-grid-item {
    break-inside: avoid;
    box-shadow: none;
    border: 1px solid v.$grey;
    
    .ui-resize-handle {
      display: none;
    }
  }
}
